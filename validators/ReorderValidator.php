<?php

    namespace papalapa\yiistart\validators;

    use yii\base\InvalidCallException;
    use yii\db\ActiveRecord;
    use yii\db\Expression;
    use yii\validators\FilterValidator;

    /**
     * Class ReorderValidator
     * @package papalapa\yiistart\validators
     */
    class ReorderValidator extends FilterValidator
    {
        public function init()
        {
            $this->filter = [$this, 'reorder'];
            parent::init(); // TODO: Change the autogenerated stub
        }

        /**
         * @inheritdoc
         */
        public function validateAttribute($model, $attribute)
        {
            $value = $model->$attribute;
            if (!$this->skipOnArray || !is_array($value)) {
                $model->$attribute = call_user_func($this->filter, $model, $attribute, $value);
            }
        }

        /**
         * @param $model
         * @param $attribute
         * @param $value
         * @return mixed
         */
        public function reorder($model, $attribute, $value)
        {
            if (!($model instanceof ActiveRecord)) {
                throw new InvalidCallException('ReorderValidator must be used on ActiveRecord instances only');
            }

            $attributeExpression = sprintf('[[%s]]', $attribute);

            if (empty($value)) /** Put to the end */ {
                $value = $model::find()->max($attributeExpression) + 1;
            } else {
                $existingModel = $model::findOne([$attributeExpression => $value]);
                if ($existingModel && $existingModel->primaryKey <> $model->primaryKey) {
                    $command       = $model::find()->createCommand();
                    $updateCommand = clone $command;
                    $resultCommand = clone $command;

                    if ($model->isNewRecord) /** Move all up */ {
                        $updateCommand      = $updateCommand->update($model::tableName(), [
                            $attributeExpression => new Expression(sprintf('%s + 1', $attributeExpression)),
                        ], ['>=', $attributeExpression, $value]);
                        $resultCommand->sql = $updateCommand->rawSql.sprintf(' ORDER BY %s DESC', $attributeExpression);
                    } else {
                        /** Temporary move to end */
                        $end      = $model::find()->max($attributeExpression) + 1;
                        $newValue = $model->getAttribute($attribute);
                        $oldValue = $model->getOldAttribute($attribute);
                        $model->updateAttributes([$attribute => $end]);
                        /** Move stack down */
                        if ($newValue > $oldValue) {
                            /** Move all items behind old and new values down */
                            $updateCommand      = $updateCommand->update($model::tableName(), [
                                $attributeExpression => new Expression(sprintf('%s - 1', $attributeExpression)),
                            ], ['AND', ['>', $attributeExpression, $oldValue], ['<=', $attributeExpression, $newValue]]);
                            $resultCommand->sql = $updateCommand->rawSql.sprintf(' ORDER BY %s ASC', $attributeExpression);
                        }
                        /** Move stack up */
                        if ($newValue < $oldValue) {
                            /** Move all items behind new and old values up */
                            $updateCommand      = $updateCommand->update($model::tableName(), [
                                $attributeExpression => new Expression(sprintf('%s + 1', $attributeExpression)),
                            ], ['AND', ['>=', $attributeExpression, $newValue], ['<', $attributeExpression, $oldValue]]);
                            $resultCommand->sql = $updateCommand->rawSql.sprintf(' ORDER BY %s DESC', $attributeExpression);
                        }
                        $value = $newValue;
                    }

                    $resultCommand->execute();
                }
            }

            return $value;
        }
    }
