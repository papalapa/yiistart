<?php

    namespace papalapa\yiistart\validators;

    use yii\base\InvalidCallException;
    use yii\db\ActiveRecord;
    use yii\db\Expression;
    use yii\validators\FilterValidator;

    /**
     * Class ReorderValidator
     * @package papalapa\yiistart\validators
     */
    class ReorderValidator extends FilterValidator
    {
        /**
         * Extra fields to unique orders
         * @var
         */
        public $extraFields;

        public function init()
        {
            $this->extraFields = (array)$this->extraFields;
            $this->filter      = [$this, 'reorder'];
            parent::init(); // TODO: Change the autogenerated stub
        }

        /**
         * @inheritdoc
         */
        public function validateAttribute($model, $attribute)
        {
            if (!($model instanceof ActiveRecord)) {
                throw new InvalidCallException('ReorderValidator must be used on ActiveRecord instances only');
            }

            $value = $model->$attribute;
            if (!$this->skipOnArray || !is_array($value)) {
                $model->$attribute = call_user_func($this->filter, $model, $attribute, $value);
            }
        }

        /**
         * @param ActiveRecord $model
         * @param string       $attribute
         * @param integer      $value
         * @return mixed
         */
        protected function reorder($model, $attribute, $value)
        {
            if ($value < 0) {
                return $model->getOldAttribute($attribute);
            }

            if ($value === 0 || $value > 0) {
                if ($existingModel = $this->existingModel($model, $attribute, $value)) {
                    if ($model->isNewRecord) {
                        $this->moveAllUp($model, $attribute, $value);
                    } else {
                        $value = $this->reorderStack($model, $attribute, $value);
                    }
                }
            } else {
                $value = $this->putToTheEnd($model, $attribute);
            }

            return $value;
        }

        /**
         * Finding another model on requested order value
         * @param ActiveRecord $model
         * @param string       $attribute
         * @param integer      $value
         * @return ActiveRecord|null
         */
        protected function existingModel($model, $attribute, $value)
        {
            $primaryKeyNames = $model::primaryKey();

            if (sizeof($primaryKeyNames) > 1) {
                throw new InvalidCallException('Model has multi column primary key. I do not know, how work with it now :).');
            }

            $query = $model::find()->where([sprintf('[[%s]]', $attribute) => $value])
                           ->andWhere(['<>', sprintf('[[%s]]', reset($primaryKeyNames)), $model->primaryKey]);

            if ($this->extraFields) /* for multi column unique order */ {
                foreach ($this->extraFields as $extraField) {
                    if ($model->hasAttribute($extraField)) {
                        $query->andWhere([sprintf('[[%s]]', $extraField) => $model->getAttribute($extraField)]);
                    }
                }
            }
            $existingModel = $query->one();

            return $existingModel;
        }

        /**
         * Put element to end of stack
         * @param ActiveRecord $model
         * @param string       $attribute
         * @return mixed
         */
        protected function putToTheEnd($model, $attribute)
        {
            $query = $model::find();

            if ($this->extraFields) /* for multi column unique order */ {
                foreach ($this->extraFields as $extraField) {
                    if ($model->hasAttribute($extraField)) {
                        $query->andWhere([sprintf('[[%s]]', $extraField) => $model->getAttribute($extraField)]);
                    }
                }
            }
            $value = $query->max(sprintf('[[%s]]', $attribute)) + 1;

            return $value;
        }

        /**
         * Reorder stack of models behind old and new values of order
         * @param ActiveRecord $model
         * @param string       $attribute
         * @param integer      $value
         * @return integer
         */
        protected function reorderStack($model, $attribute, $value)
        {
            $oldValue = $model->getOldAttribute($attribute);

            if ($value <> $oldValue) {

                /** Temporary move current model to the end */
                $end = $model::find()->max(sprintf('[[%s]]', $attribute)) + 1;
                $model->updateAttributes([$attribute => $end]);

                /** Then move stack of models up or down in dependent of new and old values */

                $command             = $model::find()->createCommand();
                $condition           = ['AND'];
                $attributeExpression = sprintf('[[%s]]', $attribute);

                if ($this->extraFields) {
                    foreach ($this->extraFields as $extraField) {
                        if ($model->hasAttribute($extraField)) {
                            $condition[] = [sprintf('[[%s]]', $extraField) => $model->getAttribute($extraField)];
                        }
                    }
                }
                if ($value > $oldValue) /** Move all items behind old and new values down */ {
                    $condition[]  = ['>', $attributeExpression, $oldValue];
                    $condition[]  = ['<=', $attributeExpression, $value];
                    $command      = $command->update($model::tableName(), [
                        $attributeExpression => new Expression(sprintf('[[%s]] - 1', $attribute)),
                    ], $condition);
                    $command->sql = $command->rawSql.sprintf(' ORDER BY %s ASC', $attributeExpression);
                }
                if ($value < $oldValue) /** Move all items behind new and old values up */ {
                    $condition[]  = ['>=', $attributeExpression, $value];
                    $condition[]  = ['<', $attributeExpression, $oldValue];
                    $command      = $command->update($model::tableName(), [
                        $attributeExpression => new Expression(sprintf('%s + 1', $attributeExpression)),
                    ], $condition);
                    $command->sql = $command->rawSql.sprintf(' ORDER BY %s DESC', $attributeExpression);
                }

                $command->execute();
            }

            return $value;
        }

        /**
         * Move all models up on one position
         * @param ActiveRecord $model
         * @param string       $attribute
         * @param integer      $value
         */
        protected function moveAllUp($model, $attribute, $value)
        {
            $command   = $model::find()->createCommand();
            $condition = ['AND', ['>=', sprintf('[[%s]]', $attribute), $value]];

            if ($this->extraFields) {
                foreach ($this->extraFields as $extraField) {
                    if ($model->hasAttribute($extraField)) {
                        $condition[] = [sprintf('[[%s]]', $extraField) => $model->getAttribute($extraField)];
                    }
                }
            }

            $command = $command->update($model::tableName(), [
                sprintf('[[%s]]', $attribute) => new Expression(sprintf('[[%s]] + 1', $attribute)),
            ], $condition);

            $command->sql = $command->rawSql.sprintf(' ORDER BY [[%s]] DESC', $attribute);
            $command->execute();
        }
    }
